{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/Dialog/Dialog.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","dialogs","allChats","chat","headerChat","buttonBack","messageBlock","messagesElements","btnElement","itom","nickname","imageUser","message","Dialog","props","react_default","a","createElement","react_router_dom","onClick","setOpenMessages","setDialog","id","to","className","style","src","alt","name","Message","_ref","maxLength","maxLengthCreator","DialogReduxForm","reduxForm","form","onSubmit","handleSubmit","createField","Textarea","required","Dialogs","dialogsPage","Object","objectWithoutProperties","_useState","useState","_useState2","slicedToArray","openMessages","dialogId","DialogsElement","map","n","Dialogs_Dialog_Dialog","key","MessageElement","messages","m","Dialogs_Message_Message","addNewMessage","compose","connect","state","sendMessage","setDialogId","withAuthRedirect","components_Dialogs_Dialogs","assign","value","newMessage"],"mappings":"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","file":"static/js/2.4e855518.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1XXDW\",\"allChats\":\"Dialogs_allChats__23tRy\",\"chat\":\"Dialogs_chat__1GUJm\",\"headerChat\":\"Dialogs_headerChat__1Oluw\",\"buttonBack\":\"Dialogs_buttonBack__37pUe\",\"messageBlock\":\"Dialogs_messageBlock__b8Z4R\",\"messagesElements\":\"Dialogs_messagesElements__3bAAU\",\"btnElement\":\"Dialogs_btnElement__2NZ1Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itom\":\"Dialog_itom__2nHIX\",\"nickname\":\"Dialog_nickname__3m0YM\",\"imageUser\":\"Dialog_imageUser__1Wrm3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__Ni5FG\"};","import React from 'react';\r\nimport style from './Dialog.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport imageUser from \"../../../assecs/images/user.png\"\r\n\r\nconst Dialog = (props) => {\r\n\r\n    const functionClik = () =>{\r\n        props.setOpenMessages(true);\r\n        props.setDialog(props.id);\r\n    }\r\n\r\n  return(\r\n        <NavLink onClick={() => {functionClik()}} to={\"/dialogs/\" + props.id}  className={style.itom}>\r\n            <div><img className={style.imageUser} src={imageUser} alt=\"imageUser\"/></div>\r\n            <div className={style.nickname}>{props.name}</div>\r\n        </NavLink>\r\n  );\r\n}\r\n\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport style from './Message.module.css'\r\n\r\nconst Message = ({message}) => {\r\n\r\n    return  <div>\r\n                <p className={style.message}>\r\n                    {message}\r\n                </p>\r\n            </div>\r\n}\r\n\r\nexport default Message;","import React, {useState} from 'react';\r\nimport style from './Dialogs.module.css'\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport Message from \"./Message/Message\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {createField, Textarea} from \"../common/FormsControl/FormsControl\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport imageUser from \"../../assecs/images/user.png\"\r\n\r\n\r\nconst Dialogs = ({dialogsPage, ...props}) => {\r\n\r\n    const [openMessages, setOpenMessages] = useState(false);\r\n    const itom = \"dialog_\" + [dialogsPage.dialogId]\r\n\r\n    let DialogsElement = dialogsPage.dialogs.map(\r\n        n => <Dialog name={n.name} key={n.id} id={n.id} dialogsPage={dialogsPage} setOpenMessages={setOpenMessages}  setDialog={props.setDialog}/>\r\n    );\r\n    let MessageElement = dialogsPage.messages[itom].map(\r\n        m => <Message message={m.message} key={m.id} />\r\n    );\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n\r\n\r\n            {openMessages\r\n                ? <div className={style.chat}>\r\n\r\n                    <div className={style.headerChat}>\r\n                        <button onClick={ () => setOpenMessages(false)} className={style.buttonBack}>Back</button>\r\n                        <div>{ dialogsPage.dialogs[dialogsPage.dialogId].name}</div>\r\n                        <img src={imageUser} alt=\"imageUser\"/>\r\n                    </div>\r\n                    <div className={style.messageBlock}>\r\n                        <div className={style.messagesElements}>\r\n                            {MessageElement}\r\n                        </div>\r\n                        <DialogReduxForm onSubmit={props.addNewMessage} />\r\n                    </div>\r\n                </div>\r\n                : <div className={style.allChats}>\r\n                    <h2>DIALOGS</h2>\r\n                {DialogsElement}\r\n                </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst maxLength = maxLengthCreator(500);\r\n\r\nconst DialogForm = (props) => {\r\n\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            {createField(\"Message\", \"newMessage\", Textarea, [required, maxLength])}\r\n            <div>\r\n                <button className={style.btnElement}>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst DialogReduxForm = reduxForm({form: \"messages\"})(DialogForm)\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {sendMessage, setDialogId } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nconst DialogsContainer = (props) => {\r\n    const addNewMessage = (value) => {\r\n        props.sendMessage(value.newMessage);\r\n        value.newMessage = \"\";\r\n    }\r\n\r\n    const setDialog = (id) =>{\r\n        props.setDialogId(id)\r\n    }\r\n\r\n    return <Dialogs {...props}\r\n                    addNewMessage={addNewMessage}\r\n                    setDialog={ setDialog}\r\n                    dialogsPage={props.dialogsPage}\r\n\r\n    />\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    dialogsPage: state.dialogsPage\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {sendMessage, setDialogId}),\r\n    withAuthRedirect)(DialogsContainer);\r\n\r\n"],"sourceRoot":""}